Document Object Model (DOM)

 Conjunto de objetos dentro do navegador, funciona como
 um facilitador para acessar internamente os componentes
 de um website.

 Arvore DOM:

  # window

     * location

         ...

     * document

         @ html
    
             - head

                 - meta

                 - title

                 ...

             - body

                 - h1

                 - p

                 - div

                 ...

     * history

         ...


Acessando elementos da arvore DOM

  - 'getElementsByTagName()': Acessa elementos usando a tag-name
    como base. Retorna sempre uma lista de elementos.

     Exemplos:

       - 'window.document.getElementsByTagName('p');' - Encontra
         e retorna uma lista de paragráfos do HTML.

  - 'getElementByName()': Acessa elementos usando o name como base.
     Retorna sempre um único elemento.

     Exemplos:

       - 'window.document.getElementByName('div1');' - encontra
       e retorna o elemento com nome 'div1'.


  - 'getElementById()': Acessa elementos usando o id como base.
     Retorna um único elemento.

     Exemplos:

       - 'window.document.getElementsById('msg');' - Encontra
       e retorna o objeto html que tenha o id 'msg'.

  - 'getElementByClassName()': Acessa elementos usando o class
    name como base. Retorna sempre uma lista de elementos.

     Exemplos:

       - 'window.document.getElementsByClassName('text');' -
       Encontra e retorna a lista de elementos que tenha a
       classe 'text'.


  - 'querySelector()': Acessa elementos usando uma query como
    base, onde os elementos que satisfazem a query são retornados
    pela busca. O modelo de query funciona de maneira similar ao
    usado dentro de CSSs. A query retorna sempre o primeiro
    elemento encontrado.

     Exemplos:

       - 'window.document.querySelector("div#txt1");' - Encontra
       e retorna a div que possua o id 'txt1'.

       - 'window.document.querySelector("div.text");' - encontra
       e retorna a primeira div que possua a classe 'text'.


  - 'querySelectorAll()': Funciona exatamente como o querySelector(),
    porém, retorna todos os elementos encontrados que satisfaçãm a
    query. Sendo assim, retorna uma lista de elementos.

     Exemplos:

       - 'window.document.querySelector("div.text");' - encontra
       e retorna todas as divs que possuam a classe 'text'.


  - 'write()': Add a new line directly in the HTML body,
     after the already existent content there.

     
  - document: Inside window, we have the 'document',
    that is the HTML document itself and by that,
    it's possible to access many atributes and
    methods to manipulate HTML and CSS.

   - 'alert()': Open a alert panel in browser window,
    interactable to users.

   - 'confirm()': Open a confirmation panel, with
     options, like 'ok' or 'cancel'.

   - 'prompt()': Open a interactable panel with input
     text field, when user can enter data.
  
  

  
Eventos do DOM

 In HTML, it is possible define a listener to an event directly
 in HTML elements, just declaring the atribute referenced of The
 respective event, Adding the term 'on' before the event name.

 These are some events:

  - 'mouseenter': Triggered when mouse enters in element area.

  - 'mousemove': Triggered when mouse moves inside element area.

  - 'mousedown': Triggered when mouse action button is pressed.

  - 'onmouseup': Triggered when mouse action button is released.

  - 'click': Triggered when mouse action click is actioned.

  - 'onmouseout': Triggered when mouse exits the element area.

  When delcaring in the HTML element, it would be:
    - 'onmouseenter="handleEvent()"'.

 IN Javscript, it is possible add listener to HTML elements, using
 the method 'addEventListener()'. It requires the event name and
 the function that will handle the event when it be triggered.

 Examples:

   - 'element.addEventListener("onmouseenter", "handleEvent()")'.


